# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
#update_fastlane
skip_docs

# git url of match
@match_git_url = ENV["MATCH_GIT_URL"]


default_platform(:mac)

platform :mac do
  desc "Description of what the lane does"
  lane :custom_lane do
    # add actions here: https://docs.fastlane.tools/actions
  end
end

lane :setupCI do
  desc "Setup the keychain and match to work with CI"
  #setup_ci
end

lane :getbundleid do
  desc "gets bundleid from the xcode project files"
  get_product_bundle_id(project_filepath: 'networkShareMounter.xcodeproj', scheme: 'NetworkShareMounter')
end

lane :getappversion do
  desc "gets the version of the app. It first looks in the plist and then for '$(MARKETING_VERSION)'"
  get_version_number(xcodeproj: "networkShareMounter.xcodeproj",target: "Network Share Mounter")  
end

lane :getlatestag do
  desc "gets the latest git tag. This tag is used to set the version number of the package"
  tags = git_tags(limit: 1)
  tags.join()
end

lane :commonTasks do
  desc "perform some commont build tasks"
  id = getbundleid
  tag = getlatestag
  default_platform(:mac)
  signing_id = ENV["SIGNING_ID"]
  app_store_connect_api_key(
      is_key_content_base64: true
  )
  #desc "test for proper Xcode version"
  #xcversion(version: "~> 13")
  #setupCI
  desc "lint those drity lines of code"
  swiftlint(
    mode: :lint,      # SwiftLint mode: :lint (default) or :autocorrect
    output_file: "swiftlint.result.json", # The path of the output file (optional)
    config_file: ".swiftlint-ci.yml",     # The path of the configuration file (optional)
    files: [                                # List of files to process (optional)
        "Network Share Mounter/preferences/config.swift",
        "Network Share Mounter/preferences/PreferenceKeys.swift",
        "Network Share Mounter/preferences/PreferenceManager.swift",
        "Network Share Mounter/preferences/FAU.swift",
        "Network Share Mounter/lookups/SRVResolver.swift",
        "Network Share Mounter/lookups/SRVRecord.swift",
        "Network Share Mounter/managers/KeychainManager.swift",
        "Network Share Mounter/managers/ShareManager.swift",
        "Network Share Mounter/managers/AccountsManager.swift",
        "Network Share Mounter/Extensions/Date.swift",
        "Network Share Mounter/Extensions/Data.swift",
        "Network Share Mounter/Extensions/Notification.swift",
        "Network Share Mounter/Extensions/URL.swift",
        "Network Share Mounter/Extensions/String.swift",
        "Network Share Mounter/Extensions/SetupSession.swift",
        "Network Share Mounter/model/UserShare.swift",
        "Network Share Mounter/model/Errorcodes.swift",
        "Network Share Mounter/model/DisplayShareTypes.swift",
        "Network Share Mounter/model/Mounter.swift",
        "Network Share Mounter/model/AppStatistics.swift",
        "Network Share Mounter/model/Share.swift",
        "Network Share Mounter/model/Menu.swift",
        "Network Share Mounter/model/DogeAccount.swift",
        "Network Share Mounter/view/KrbAuthViewController.swift",
        "Network Share Mounter/view/NetworkShareMounterViewController.swift",
        "Network Share Mounter/view/ShareViewController.swift",
        "Network Share Mounter/view/HelpPopoverView.swift",
        "Network Share Mounter/AppDelegate.swift",
        "Network Share Mounter/helper/Logger.swift",
        "Network Share Mounter/helper/Monitor.swift",
        "Network Share Mounter/helper/AutomaticSignIn.swift",
        "Network Share Mounter/helper/ActivityController.swift",
        "Network Share Mounter/helper/NSTaskWrapper.swift",
        "Network Share Mounter/helper/NetworkWatcher.swift",
        "Network Share Mounter/AppDelegate.swift"
    ],
    raise_if_swiftlint_error: true,      # Allow fastlane to raise an error if swiftlint fails
    ignore_exit_status: false    # Allow fastlane to continue even if SwiftLint returns a non-zero exit status
  )
  get_certificates
  sync_code_signing
  cert
  # sigh(force: true)
  gym(
    scheme: "networkShareMounter",
    output_directory: "build/",
    export_method: "developer-id",
    export_options: "./ExportOptions.plist"
  )
end

lane :build do
  begin
    commonTasks
  end
end

lane :testbuild do
  begin
    desc "incerement Xcodes build number"
    increment_build_number(
      xcodeproj: "networkShareMounter.xcodeproj"
    )
    build
    appversion = getappversion
    desc "Create DMG image"
    dmg(
      path: "build/Network Share Mounter.app",
      output_path: "build/NetworkShareMounterTest-#{appversion}.dmg",
      volume_name: "NetworkShareMounter-Test",
      size: 6
    )
    desc "creating .pkg file"
    signing_id = ENV["SIGNING_ID"]
    output = sh("productbuild", "--sign",  "#{signing_id}", "--scripts", "../pkgscripts", "--version", "#{appversion}", "--component", "../build/Network\ Share\ Mounter.app", "/Applications", "../build/NetworkShareMounterTest-#{appversion}.pkg")
  rescue => exception
    on_error(exception)
  end
end

lane :alpha do
  begin
    desc "incerement Xcodes build number"
    increment_build_number(
      xcodeproj: "networkShareMounter.xcodeproj"
    )
    build
    appversion = getappversion
    desc "Create DMG image"
    dmg(
      path: "build/Network\ Share\ Mounter.app",
      output_path: "build/NetworkShareMounterAlpha-#{appversion}.dmg",
      volume_name: "NetworkShareMounter-Alpha",
      size: 6
    )
    desc "creating .pkg file"
    signing_id = ENV["SIGNING_ID"]
    output = sh("productbuild", "--sign",  "#{signing_id}", "--scripts", "../pkgscripts", "--version", "#{appversion}", "--component", "../build/Network\ Share\ Mounter.app", "/Applications", "../build/NetworkShareMounterAlpha-#{appversion}.pkg")
    desc "Notarize dmg"
    notarize(
      package: "build/NetworkShareMounterAlpha-#{appversion}.dmg", 
      bundle_id: "de.fau.rrze.NetworkShareMounter", 
      username: "rrze-apple-entwickler@fau.de"
    )
    desc "Notarize pkg"
    notarize(
      package: "build/NetworkShareMounterAlpha-#{appversion}.pkg", 
      bundle_id: "de.fau.rrze.NetworkShareMounter", 
      username: "rrze-apple-entwickler@fau.de"
    )
  rescue => exception
    on_error(exception)
  end
end

lane :beta do
  begin
    desc "incerement Xcodes build number"
    increment_build_number(
      xcodeproj: "networkShareMounter.xcodeproj"
    )
    build
    appversion = getappversion
    desc "Create DMG image"
    dmg(
      path: "build/Network\ Share\ Mounter.app",
      output_path: "build/NetworkShareMounterBeta-#{appversion}.dmg",
      volume_name: "NetworkShareMounter-Beta",
      size: 6
    )
    desc "creating .pkg file"
    signing_id = ENV["SIGNING_ID"]
    output = sh("productbuild", "--sign",  "#{signing_id}", "--scripts", "../pkgscripts", "--version", "#{appversion}", "--component", "../build/Network\ Share\ Mounter.app", "/Applications", "../build/NetworkShareMounterBeta-#{appversion}.pkg")
    desc "Notarize dmg"
    notarize(
      package: "build/NetworkShareMounterBeta-#{appversion}.dmg", 
      bundle_id: "de.fau.rrze.NetworkShareMounter", 
      username: "rrze-apple-entwickler@fau.de"
    )
    desc "Notarize pkg"
    notarize(
      package: "build/NetworkShareMounterBeta-#{appversion}.pkg", 
      bundle_id: "de.fau.rrze.NetworkShareMounter", 
      username: "rrze-apple-entwickler@fau.de"
    )
  rescue => exception
    on_error(exception)
  end
end

lane :release do
  begin
    desc "incerement Xcodes build number"
    increment_build_number(
      xcodeproj: "networkShareMounter.xcodeproj"
    )
    build
    appversion = getappversion
    desc "Create DMG image"
    dmg(
      path: "build/Network Share Mounter.app",
      output_path: "build/NetworkShareMounter-#{appversion}.dmg",
      volume_name: "NetworkShareMounter",
      size: 6
    )
    desc "creating .pkg file"
    signing_id = ENV["SIGNING_ID"]
    output = sh("productbuild", "--sign",  "#{signing_id}", "--scripts", "../pkgscripts", "--version", "#{appversion}", "--component", "../build/Network\ Share\ Mounter.app", "/Applications", "../build/NetworkShareMounter-#{appversion}.pkg")
    desc "Notarize dmg"
    notarize(
      package: "build/NetworkShareMounter-#{appversion}.dmg", 
      bundle_id: "de.fau.rrze.NetworkShareMounter", 
      username: "rrze-apple-entwickler@fau.de"
    )
    desc "Notarize pkg"
    notarize(
      package: "build/NetworkShareMounter-#{appversion}.pkg", 
      bundle_id: "de.fau.rrze.NetworkShareMounter", 
      username: "rrze-apple-entwickler@fau.de"
    )
  rescue => exception
    on_error(exception)
  end
end

# generates the command-line networkShareMounter app
lane :runbuild do
  id = getbundleid
  tag = getlatestag
  signing_id = ENV["SIGNING_ID"]
  output = sh("../build.sh", "#{id}", "#{tag}", "#{signing_id}")
end

def on_error(exception)
  # git_branch = git_branch()
  # last_git_tag = last_git_tag()
  # build_number = get_build_number()
end